<project name="setup" default="build"
 xmlns:if="ant:if"
 xmlns:unless="ant:unless"
> 
  <loadproperties srcFile="build.properties"/>

  <description>${project} ${subtitle}
ant script to run sphinx-build:
  ant clean
  ant workbook (-Dopen=true)
  ant instructor (-Dopen=true)
  
or to run sphinx-autobuild (which opens a browser for live review):
  ant instructor-site
  ant workbook-site

Use -Dhost=https//&lt;domain&gt;.geocat.live/mapping to postprocess examples.

</description>

  <!-- defines DSTAMP -->
  <tstamp/>
  
  <!-- maven defaults -->
  <property name="build" value="${basedir}/target"/>
  <property name="src" value="${basedir}/src/"/>
  
  <!-- _sphinx target defaults -->
  <property name="builder" value="html"/>
  <property name="sourcedir" value="${src}/sphinx"/>
  <property name="outputdir" value="${build}/${builder}"/>
  <property name="sphinx_build_options" value="-q -N -W --keep-going -n -j auto"/>
  <property name="sphinx_auobuild_options" value="-q -N -W -n -j auto --open-browser"/>
  
  <property environment="env" />
  
  <condition property="sphinx.available">
    <or>
      <available file="sphinx-build" filepath="${env.PATH}"/>
      <available file="sphinx-build.exe" filepath="${env.Path}"/>
      <available file="sphinx-build.exe" filepath="${env.PATH}"/>
    </or>
  </condition>

  <condition property="autobuild.available">
    <or>
      <available file="sphinx-autobuild" filepath="${env.PATH}"/>
      <available file="sphinx-autobuild.exe" filepath="${env.Path}"/>
      <available file="sphinx-autobuild.exe" filepath="${env.PATH}"/>
    </or>
  </condition>

  <target name="_init">
    <mkdir dir="${build}"/>
  </target>
  
  <target name="clean" description="clean up build directory">
     <delete dir="${build}"/>
  </target>
  
  <target name="workbook" description="attendee workbook">
    <antcall target="_sphinx">
      <param name="outputdir" value="${build}/workbook"/>
      <param name="doctrees" value="${build}/doctrees"/>
    </antcall>
    <antcall target="_postprocess">
        <param name="outputdir" value="${build}/workbook"/>
    </antcall>
    <antcall target="_check">
        <param name="file" value="${build}/workbook/index.html"/>
    </antcall>
  </target>
  
  <target name="workbook-site" description="workbook interactive editing">
    <antcall target="_autobuild">
      <param name="outputdir" value="${build}/workbook"/>
      <param name="doctrees" value="${build}/doctrees"/>
    </antcall>
  </target>

  <target name="instructor" description="instructor notes">
    <antcall target="_sphinx">
      <param name="tags" value="-t instructor"/>
      <param name="outputdir" value="${build}/instructor"/>
      <param name="doctrees" value="${build}/doctrees"/>
    </antcall>
    <antcall target="_postprocess">
        <param name="outputdir" value="${build}/instructor"/>
    </antcall>
    <antcall target="_check">
        <param name="file" value="${build}/instructor/index.html"/>
    </antcall>
  </target>
  
  <target name="instructor-site" description="instructor notes interactive editing">
    <antcall target="_autobuild">
      <param name="tags" value="-t instructor"/>
      <param name="outputdir" value="${build}/instructor"/>
      <param name="doctrees" value="${build}/doctrees"/>
    </antcall>
  </target>

  
  <target name="slides" description="instructor slides">
    <antcall target="_sphinx">
      <param name="builder" value="slides"/>
      <param name="outputdir" value="${build}/instructor/_slides"/>
      <param name="doctrees" value="${build}/doctrees"/>
    </antcall>
    <antcall target="_postprocess">
        <param name="outputdir" value="${build}/instructor/_slides"/>
    </antcall>
    <antcall target="_check">
        <param name="file" value="${build}/instructor/_slides/index.html"/>
    </antcall>
  </target>
  
  <target name="build" description="build instructor notes and slides">
    <antcall target="_sphinx">
      <param name="tags" value="-t instructor"/>
      <param name="outputdir" value="${build}/instructor"/>
      <param name="doctrees" value="${build}/doctrees"/>
    </antcall>
    <antcall target="_sphinx">
      <param name="builder" value="slides"/>
      <param name="outputdir" value="${build}/instructor/_slides"/>
      <param name="doctrees" value="${build}/doctrees"/>
    </antcall>
    <antcall target="_postprocess">
        <param name="outputdir" value="${build}/instructor"/>
    </antcall>
    <antcall target="_check">
        <param name="file" value="${build}/instructor/index.html"/>
    </antcall>
  </target>
  
  <target name="package" depends="workbook"
    description="Package workbook for attendees">
    <zip destfile="${build}/${destfile}_${DSTAMP}.zip">
      <zipfileset dir="${build}/workbook"/>
    </zip>
    <antcall target="_check">
        <param name="file" value="${build}/${destfile}_${DSTAMP}.zip"/>
        <param name="open" value="False"/>
    </antcall>
  </target>

  <target name="bundle" depends="build"
    description="Package instructor workbook and slides">
    <zip destfile="${build}/${destfile}_instructor_${DSTAMP}.zip">
      <zipfileset dir="${build}/instructor" prefix="${module_number}"/>
    </zip>
    <antcall target="_check">
        <param name="file" value="${build}/${destfile}_instructor_${DSTAMP}.zip"/>
        <param name="open" value="False"/>
    </antcall>
  </target>
  
  <target name="_sphinx" if="sphinx.available">
    <mkdir dir="${outputdir}"/>
    <exec executable="sphinx-build" failonerror="true">
      <arg line="${tags}" if:set="tags"/>
      <arg line="${sphinx_build_options}"/>
      <arg line="-b ${builder}"/>
      <arg line="-Dhtml_theme=${theme}" if:set="theme"/>
      <arg line="${theme_options}" if:set="theme_options"/>
      <arg line="${config_settings}" if:set="config_settings"/>
      <arg line="-d ${doctrees}" if:set="doctrees"/>
      <arg line="-D release=${release}" if:set="release"/>
      <arg line="-D version=${version}" if:set="version"/>
      <arg path="${sourcedir}"/>
      <arg path="${outputdir}"/>
    </exec>
  </target>
  
  <target name="_autobuild" if="autobuild.available">
    <mkdir dir="${outputdir}"/>
    <exec executable="sphinx-autobuild" failonerror="true">
      <arg line="${tags}" if:set="tags"/>
      <arg line="${sphinx_auobuild_options}"/>
      <arg line="-b html"/>
      <arg line="-Dhtml_theme=${theme}" if:set="theme"/>
      <arg line="${theme_options}" if:set="theme_options"/>
      <arg line="${config_settings}" if:set="config_settings"/>
      <arg line="-d ${doctrees}" if:set="doctrees"/>
      <arg line="-D release=${release}" if:set="release"/>
      <arg line="-D version=${version}" if:set="version"/>
      <arg path="${sourcedir}"/>
      <arg path="${outputdir}"/>
    </exec>
  </target>
  
  
  <target name="_postprocess">
    <condition property="host.provided">
       <and>
         <isset property="host"/>
         <not><equals arg1="http://localhost:8080/geoserver" arg2="${host}"/></not>
       </and>
    </condition>
    
    <echo level="info" if:set="host.provided">Postprocess ${outputdir}: ${host}</echo>
    <replace if:set="host.provided"
             dir="${outputdir}">
      <include name="**/*.html"/>
      <include name="**/*.json"/>
      <include name="**/*.txt"/>
      <include name="**/*.js"/>
      <include name="**/*.xml"/>
      <replacefilter token="http://localhost:8080/"
                     value="${host}"/>
    </replace>
  </target>    
  
  <target name="_check">
    <!-- check if file created -->
    <available file="${file}" type="file" property="file.present"/>
    <echo level="info" if:set="file.present">File generated ${file}</echo>
    <echo level="error" unless:set="file.present">File not generated ${file}</echo>
    
    <!-- macOS -->
    <condition property="open.present" value="true">
      <and>
        <equals arg1="${open}" arg2="true"/>
        <available file="/usr/bin/open" type="file"/>
      </and>
    </condition>
    <exec executable="open" if:set="open.present">
       <arg line="${file}"/>
    </exec>
    
  </target>

</project>